#!/usr/bin/env node

/**
 * Test MCP Capabilities Integration
 */

import MCPClient from './src/core/mcp-client.js';
import ExternalMCPRegistry from './src/core/external-mcp-registry.js';

async function testMCPCapabilities() {
  try {
    console.log('🧪 Testing MCP Capabilities\n');

    const mcpRegistry = new ExternalMCPRegistry();
    await mcpRegistry.initialize();

    const mcpClient = new MCPClient(mcpRegistry);
    await mcpClient.initialize();

    console.log(`✅ MCP Client initialized with ${mcpClient.getConnectedServers().length} servers`);
    console.log(`📊 Available tools: ${mcpClient.getAvailableTools().length}\n`);

    // Test Web Browsing (Playwright)
    console.log('🌐 Testing Web Browsing Capabilities...');
    const searchResult = await mcpClient.searchWeb('sustainable energy IoT platforms 2024');
    console.log(`   ✅ Web search completed: Found ${searchResult.results.length} results`);
    console.log(`   📄 Top result: ${searchResult.results[0].title}`);

    const contentResult = await mcpClient.extractWebContent('https://example.com/energy-platform');
    console.log(`   ✅ Content extraction completed: ${contentResult.extracted.title}`);

    // Test Sequential Thinking
    console.log('\n🧠 Testing Sequential Thinking Capabilities...');
    const thinkingResult = await mcpClient.sequentialThinking('How to optimize renewable energy distribution using AI?');
    console.log(`   ✅ Sequential analysis completed: ${thinkingResult.thinking.steps.length} steps`);
    console.log(`   📝 First step: ${thinkingResult.thinking.steps[0]}`);

    const decisionResult = await mcpClient.createDecisionTree('Choose between solar vs wind energy systems');
    console.log(`   ✅ Decision tree created with ${decisionResult.tree.branches.length} options`);

    // Test Memory Management
    console.log('\n💾 Testing Memory Capabilities...');
    const storeResult = await mcpClient.storeMemory('energy-platform-analysis', {
      findings: 'Renewable energy platforms show 40% efficiency increase with AI optimization',
      recommendations: ['Use IoT sensors for real-time monitoring', 'Implement blockchain for transparent governance'],
      timestamp: new Date().toISOString()
    });
    console.log(`   ✅ Memory stored: ${storeResult.id}`);

    const retrieveResult = await mcpClient.retrieveMemory('energy optimization');
    console.log(`   ✅ Memory retrieved: ${retrieveResult.results.length} relevant entries`);

    // Test Code Execution
    console.log('\n💻 Testing Code Execution Capabilities...');
    const pythonResult = await mcpClient.executeCode('python', `
print("Energy efficiency calculation:")
efficiency = (renewable_output / total_demand) * 100
print(f"Current efficiency: {efficiency}%")
    `.replace('renewable_output', '850').replace('total_demand', '1000'));
    console.log(`   ✅ Python code executed: Exit code ${pythonResult.exitCode}`);
    console.log(`   📊 Output: ${pythonResult.output.split('\\n')[0]}`);

    // Test File Operations
    console.log('\n📁 Testing File System Capabilities...');
    const writeResult = await mcpClient.writeFile('/tmp/energy-report.txt', 
      'Sustainable Energy Platform Analysis Report\n' +
      'Generated by autonomous AI agents with MCP tools\n' +
      `Timestamp: ${new Date().toISOString()}`
    );
    console.log(`   ✅ File written: ${writeResult.path}`);

    const readResult = await mcpClient.readFile('/tmp/energy-report.txt');
    console.log(`   ✅ File read: ${readResult.size} bytes`);
    console.log(`   📄 Content preview: ${readResult.content.split('\\n')[0]}`);

    console.log('\n🎉 All MCP capabilities tested successfully!');
    console.log('\n📊 MCP Integration Summary:');
    console.log(`   🌐 Web Browsing: Playwright with ${mcpClient.getToolsForCapability('web-browsing').length} tools`);
    console.log(`   🧠 Reasoning: Sequential thinking with ${mcpClient.getToolsForCapability('structured-reasoning').length} tools`);
    console.log(`   💾 Memory: Persistent storage with ${mcpClient.getToolsForCapability('persistent-memory').length} tools`);
    console.log(`   💻 Code: Execution capabilities with ${mcpClient.getToolsForCapability('code-execution').length} tools`);
    console.log(`   📁 Files: System operations with ${mcpClient.getToolsForCapability('file-management').length} tools`);

    await mcpClient.disconnect();
    
  } catch (error) {
    console.error('❌ MCP test failed:', error);
  }
}

testMCPCapabilities();